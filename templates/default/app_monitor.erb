God.watch do |w|
  w.name  = 't-<%= node.name %>-<%= node.chef_environment %>'
  w.group = 'g-<%= node.name %>-<%= node.chef_environment %>'

  rails_env  = '<%= node.chef_environment %>'
  rails_root = '<%= node[:app_server][:capistrano_pre_setup][:deploy_to] %>/current'

  w.env = {
    'BUNDLE_GEMFILE' => "#{rails_root}/Gemfile",
  }

  w.interval = 30.seconds

  # unicorn needs to be run from the rails root
  w.start = "source /etc/profile.d/rbenv.sh && cd #{rails_root} && bundle exec unicorn -D -c #{rails_root}/config/unicorn/#{rails_env}.rb -E #{rails_env}"

  # QUIT gracefully shuts down workers
  w.stop = "kill -QUIT `cat #{rails_root}/tmp/pids/unicorn.pid`"

  # USR2 causes the master to re-create itself and spawn a new worker pool
  w.restart = "kill -USR2 `cat #{rails_root}/tmp/pids/unicorn.pid`"

  w.start_grace = 10.seconds
  w.restart_grace = 10.seconds
  w.pid_file = "#{rails_root}/tmp/pids/unicorn.pid"

  w.uid = '<%= node[:app_server][:capistrano_pre_setup][:owner] %>'
  w.gid = '<%= node[:app_server][:capistrano_pre_setup][:group] %>'

  w.behavior(:clean_pid_file)

  w.start_if do |start|
    start.condition(:process_running) do |c|
      c.interval = 5.seconds
      c.running = false
    end
  end

  w.restart_if do |restart|
    restart.condition(:memory_usage) do |c|
      c.above = 300.megabytes
      c.times = [3, 5] # 3 out of 5 intervals
    end

    restart.condition(:cpu_usage) do |c|
      c.above = 50.percent
      c.times = 5
    end
  end

  # lifecycle
  w.lifecycle do |on|
    on.condition(:flapping) do |c|
      c.to_state = [:start, :restart]
      c.times = 5
      c.within = 5.minute
      c.transition = :unmonitored
      c.retry_in = 10.minutes
      c.retry_times = 5
      c.retry_within = 2.hours
    end
  end
end
